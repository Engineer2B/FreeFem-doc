//$\codered$ check all commands in types.md

// int
{
	int i = 0;
}

// bool
{
	bool b = true;
}

// real
{
	real r = 0.;
}

// complex
{
	complex c = 0. + 1i;
}

// string
{
	string s = "this is a string";
}

// border
{
	border b(t=0., 1.){x=cos(2.*pi*t); y=sin(2.*pi*t);}
}
{
	border b(t=0., 1.){x=cos(2.*pi*t); y=sin(2.*pi*t); label=1;}
}
{
	border b(t=0., 1.){real tt=2.*pi*t; x=cos(tt); y=sin(tt);}
}
{
	int nn = 20;
	real[int] vectorX(nn), vectorY(nn);
	for (int i = 0; i < nn; i++){
		real t = i / (nn-1.);
		vectorX[i] = cos(2.*pi*t);
		vectorY[i] = sin(2.*pi*t);
	}
	border b(t=0, vectorX.n-1){P.x=vectorX[t]; P.y=vectorY[t];}
	//plot(b(vectorX.n-1));
}

// mesh
{
	mesh Th;
}

// mesh3
{
	mesh3 Th;
}

// fespace
{
	mesh Th;
	fespace Uh(Th, P1);
	fespace UPh(Th, [P2, P2, P1]);
}
{
	mesh3 Th;
	fespace Uh(Th, P1);
	Uh u;

	fespace UPh(Th, [P2, P2, P1]);
	UPh [Ux, Uy, p];
}

// macro

macro grad(u) [dx(u), dy(u)] //
macro Grad(U) [grad(U#x), grad(U#y)] //

// func
{
	func f = x^2 + y^2;
}
{
	func real f (real var){
		return x^2 + y^2 + var^2;
	}
}

// problem
{
	mesh Th;
	fespace Uh(Th, P1);
	Uh u, uh;
	problem Laplacian (u, uh, solver=CG)
		= int2d(Th)(
			  u * uh
		)
		+ on(1, u=0)
		;
}

//TODO
// array
{
	real[int] Ai = [1, 1, 0, 0];
	real[string] As = [1, 1, 0, 0];

	int ArraySize = Ai.n;

	real[int, int] Aii = [[1, 1], [0, 0]];

	int ArraySize1 = Aii.n;
	int ArraySize2 = Aii.m;

	real ArrayMin = Aii.min;
	real ArrayMax = Aii.max;
}

// matrix
matrix A = [
	[1, 2, 3],
	[4, 5, 6],
	[7, 8, 9]
];
